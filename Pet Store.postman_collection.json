{
	"info": {
		"_postman_id": "9a5e180c-2c9a-414f-97cd-70bc441964ad",
		"name": "Pet Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9720310"
	},
	"item": [
		{
			"name": "[Pet][E2E] Create, update, get and delete new pet",
			"item": [
				{
					"name": "Create a new pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const petID = (Math.random() * 1000).round();",
									"const petName = \"petName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const photoUrls = \"https://petstore.swagger.io/#/pet/addPet\";",
									"",
									"const categoryID = (Math.random() * 1000).round();",
									"const categoryName = \"categoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const tagID = (Math.random() * 1000).round();",
									"const tagName = \"tagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.collectionVariables.set(\"petName\", petName);",
									"pm.collectionVariables.set(\"photoUrls\", photoUrls);",
									"",
									"pm.collectionVariables.set(\"categoryID\", categoryID);",
									"pm.collectionVariables.set(\"categoryName\", categoryName);",
									"",
									"pm.collectionVariables.set(\"tagID\", tagID);",
									"pm.collectionVariables.set(\"tagName\", tagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let petResponseData = pm.response.json();",
									"",
									"const petID = petResponseData.id;",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - id, category, name, photoUrls, tags and status\", function () {",
									"    pm.expect(petResponseData).to.be.an('object');",
									"    pm.expect(petResponseData).to.have.property('id');",
									"    pm.expect(petResponseData).to.have.property('category');",
									"    pm.expect(petResponseData).to.have.property('name');",
									"    pm.expect(petResponseData).to.have.property('photoUrls');",
									"    pm.expect(petResponseData).to.have.property('tags');",
									"    pm.expect(petResponseData).to.have.property('status');",
									"});",
									"",
									"pm.test(\"ID is not null\", function () {",
									"    pm.expect(petResponseData.id).is.not.null;",
									"});",
									"",
									"pm.test(\"Category has not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.category.id).is.not.null;",
									"    pm.expect(petResponseData.category.name).is.equals(pm.collectionVariables.get('categoryName'));",
									"});",
									"",
									"pm.test(\"Name, photoUrls and status has proper value\", function () {",
									"    pm.expect(petResponseData.name).is.equals(pm.collectionVariables.get('petName'));",
									"    pm.expect(petResponseData.photoUrls[0]).is.equals(pm.collectionVariables.get('photoUrls'));",
									"    pm.expect(petResponseData.status).is.equals(\"available\");",
									"});",
									"",
									"pm.test(\"Tags have not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.tags[0].id).is.equals(pm.collectionVariables.get('tagID'));",
									"    pm.expect(petResponseData.tags[0].name).is.equals(pm.collectionVariables.get('tagName'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{categoryID}},\n        \"name\": \"{{categoryName}}\"\n    },\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"{{photoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{tagID}},\n            \"name\": \"{{tagName}}\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data about pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newPetName = \"updatedPetName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const newPhotoUrls = \"https://petstore.swagger.io/#/pet/updatePet\";",
									"",
									"const newCategoryID = (Math.random() * 1000).round();",
									"const newCategoryName = \"updatedCategoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const newTagID = (Math.random() * 1000).round();",
									"const newTagName = \"updatedTagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.collectionVariables.set(\"newPetName\", newPetName);",
									"pm.collectionVariables.set(\"newPhotoUrls\", newPhotoUrls);",
									"",
									"pm.collectionVariables.set(\"newCategoryID\", newCategoryID);",
									"pm.collectionVariables.set(\"newCategoryName\", newCategoryName);",
									"",
									"pm.collectionVariables.set(\"newTagID\", newTagID);",
									"pm.collectionVariables.set(\"newTagName\", newTagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let updatedPetResponseBody = pm.response.json();",
									"",
									"pm.test(\"The pet ID is not updated\", function() {",
									"    pm.expect(updatedPetResponseBody.id).is.equals(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"Category has new ID and new name\", function() {",
									"    pm.expect(updatedPetResponseBody.category.id).is.equals(pm.collectionVariables.get('newCategoryID'));",
									"    pm.expect(updatedPetResponseBody.category.name).is.equals(pm.collectionVariables.get('newCategoryName'));",
									"});",
									"",
									"pm.test(\"Name and photoUrls are updated \", function() {",
									"    pm.expect(updatedPetResponseBody.name).is.equals(pm.collectionVariables.get('newPetName'));",
									"    pm.expect(updatedPetResponseBody.photoUrls[0]).is.equals(pm.collectionVariables.get('newPhotoUrls'));",
									"});",
									"",
									"pm.test(\"Tags data is updated\", function() {",
									"    pm.expect(updatedPetResponseBody.tags[0].id).is.equals(pm.collectionVariables.get('newTagID'));",
									"    pm.expect(updatedPetResponseBody.tags[0].name).is.equals(pm.collectionVariables.get('newTagName'));",
									"});",
									"",
									"pm.test(\"Status is changed to: sold\", function (){",
									"pm.expect(updatedPetResponseBody.status).is.equals(\"pending\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{newCategoryID}},\n        \"name\": \"{{newCategoryName}}\"\n    },\n    \"name\": \"{{newPetName}}\",\n    \"photoUrls\": [\n        \"{{newPhotoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{newTagID}},\n            \"name\": \"{{newTagName}}\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get pet using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let petResponseData = pm.response.json();",
									"",
									"pm.test(\"ID in response is the same like during creation\", function (){",
									"    pm.expect(petResponseData.id).is.equals(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"Category has not null ID and name\", function () {",
									"    pm.expect(petResponseData.category.id).is.not.null;",
									"    pm.expect(petResponseData.category.name).is.not.empty;",
									"});",
									"",
									"pm.test(\"Name and photoUrls are not empty\", function (){",
									"    pm.expect(petResponseData.name).is.not.empty;",
									"    pm.expect(petResponseData.photoUrls).is.not.empty;",
									"});",
									"",
									"pm.test(\"Status is available\", function (){",
									"    pm.expect(petResponseData.status).is.equals(\"pending\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a chosen pet using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.to.have.status(200));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][E2E] Get pet by status and update it",
			"item": [
				{
					"name": "Find pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let getPetResponseData = pm.response.json();",
									"",
									"const petID = getPetResponseData[0].id;",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Pet has proper status: pending\", () => {",
									"    let result = getPetResponseData.find(object => object.status === \"pending\")",
									"    pm.expect(result.status).to.equals(\"pending\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "pending",
									"description": "available, pending, sold"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data about pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newPetName = \"updatedPetName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const newPhotoUrls = \"https://petstore.swagger.io/#/pet/updatePet\";",
									"",
									"const newCategoryID = (Math.random() * 1000).round();",
									"const newCategoryName = \"updatedCategoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const newTagID = (Math.random() * 1000).round();",
									"const newTagName = \"updatedTagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.collectionVariables.set(\"newPetName\", newPetName);",
									"pm.collectionVariables.set(\"newPhotoUrls\", newPhotoUrls);",
									"",
									"pm.collectionVariables.set(\"newCategoryID\", newCategoryID);",
									"pm.collectionVariables.set(\"newCategoryName\", newCategoryName);",
									"",
									"pm.collectionVariables.set(\"newTagID\", newTagID);",
									"pm.collectionVariables.set(\"newTagName\", newTagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let updatedPetResponseBody = pm.response.json();",
									"",
									"pm.test(\"The pet ID is not updated\", function() {",
									"    pm.expect(updatedPetResponseBody.id).is.equals(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"Category has new ID and new name\", function() {",
									"    pm.expect(updatedPetResponseBody.category.id).is.equals(pm.collectionVariables.get('newCategoryID'));",
									"    pm.expect(updatedPetResponseBody.category.name).is.equals(pm.collectionVariables.get('newCategoryName'));",
									"});",
									"",
									"pm.test(\"Name and photoUrls are updated \", function() {",
									"    pm.expect(updatedPetResponseBody.name).is.equals(pm.collectionVariables.get('newPetName'));",
									"    pm.expect(updatedPetResponseBody.photoUrls[0]).is.equals(pm.collectionVariables.get('newPhotoUrls'));",
									"});",
									"",
									"pm.test(\"Tags data is updated\", function() {",
									"    pm.expect(updatedPetResponseBody.tags[0].id).is.equals(pm.collectionVariables.get('newTagID'));",
									"    pm.expect(updatedPetResponseBody.tags[0].name).is.equals(pm.collectionVariables.get('newTagName'));",
									"});",
									"",
									"pm.test(\"Status is changed to: sold\", function (){",
									"pm.expect(updatedPetResponseBody.status).is.equals(\"pending\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{newCategoryID}},\n        \"name\": \"{{newCategoryName}}\"\n    },\n    \"name\": \"{{newPetName}}\",\n    \"photoUrls\": [\n        \"{{newPhotoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{newTagID}},\n            \"name\": \"{{newTagName}}\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][E2E] Try to get deleted pet",
			"item": [
				{
					"name": "Create a new pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const petID = (Math.random() * 1000).round();",
									"const petName = \"petName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const photoUrls = \"https://petstore.swagger.io/#/pet/addPet\";",
									"",
									"const categoryID = (Math.random() * 1000).round();",
									"const categoryName = \"categoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const tagID = (Math.random() * 1000).round();",
									"const tagName = \"tagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.collectionVariables.set(\"petName\", petName);",
									"pm.collectionVariables.set(\"photoUrls\", photoUrls);",
									"",
									"pm.collectionVariables.set(\"categoryID\", categoryID);",
									"pm.collectionVariables.set(\"categoryName\", categoryName);",
									"",
									"pm.collectionVariables.set(\"tagID\", tagID);",
									"pm.collectionVariables.set(\"tagName\", tagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let petResponseData = pm.response.json();",
									"",
									"const petID = petResponseData.id;",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - id, category, name, photoUrls, tags and status\", function () {",
									"    pm.expect(petResponseData).to.be.an('object');",
									"    pm.expect(petResponseData).to.have.property('id');",
									"    pm.expect(petResponseData).to.have.property('category');",
									"    pm.expect(petResponseData).to.have.property('name');",
									"    pm.expect(petResponseData).to.have.property('photoUrls');",
									"    pm.expect(petResponseData).to.have.property('tags');",
									"    pm.expect(petResponseData).to.have.property('status');",
									"});",
									"",
									"pm.test(\"ID is not null\", function () {",
									"    pm.expect(petResponseData.id).is.not.null;",
									"});",
									"",
									"pm.test(\"Category has not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.category.id).is.not.null;",
									"    pm.expect(petResponseData.category.name).is.equals(pm.collectionVariables.get('categoryName'));",
									"});",
									"",
									"pm.test(\"Name, photoUrls and status has proper value\", function () {",
									"    pm.expect(petResponseData.name).is.equals(pm.collectionVariables.get('petName'));",
									"    pm.expect(petResponseData.photoUrls[0]).is.equals(pm.collectionVariables.get('photoUrls'));",
									"    pm.expect(petResponseData.status).is.equals(\"available\");",
									"});",
									"",
									"pm.test(\"Tags have not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.tags[0].id).is.equals(pm.collectionVariables.get('tagID'));",
									"    pm.expect(petResponseData.tags[0].name).is.equals(pm.collectionVariables.get('tagName'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{categoryID}},\n        \"name\": \"{{categoryName}}\"\n    },\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"{{photoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{tagID}},\n            \"name\": \"{{tagName}}\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a chosen pet using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.to.have.status(200));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get pet using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Add a new pet to the store with status available",
			"item": [
				{
					"name": "Create a new pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const petID = (Math.random() * 1000).round();",
									"const petName = \"petName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const photoUrls = \"https://petstore.swagger.io/#/pet/addPet\";",
									"",
									"const categoryID = (Math.random() * 1000).round();",
									"const categoryName = \"categoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const tagID = (Math.random() * 1000).round();",
									"const tagName = \"tagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.collectionVariables.set(\"petName\", petName);",
									"pm.collectionVariables.set(\"photoUrls\", photoUrls);",
									"",
									"pm.collectionVariables.set(\"categoryID\", categoryID);",
									"pm.collectionVariables.set(\"categoryName\", categoryName);",
									"",
									"pm.collectionVariables.set(\"tagID\", tagID);",
									"pm.collectionVariables.set(\"tagName\", tagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let petResponseData = pm.response.json();",
									"",
									"const petID = petResponseData.id;",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - id, category, name, photoUrls, tags and status\", function () {",
									"    pm.expect(petResponseData).to.be.an('object');",
									"    pm.expect(petResponseData).to.have.property('id');",
									"    pm.expect(petResponseData).to.have.property('category');",
									"    pm.expect(petResponseData).to.have.property('name');",
									"    pm.expect(petResponseData).to.have.property('photoUrls');",
									"    pm.expect(petResponseData).to.have.property('tags');",
									"    pm.expect(petResponseData).to.have.property('status');",
									"});",
									"",
									"pm.test(\"ID is not null\", function () {",
									"    pm.expect(petResponseData.id).is.not.null;",
									"});",
									"",
									"pm.test(\"Category has not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.category.id).is.not.null;",
									"    pm.expect(petResponseData.category.name).is.equals(pm.collectionVariables.get('categoryName'));",
									"});",
									"",
									"pm.test(\"Name, photoUrls and status has proper value\", function () {",
									"    pm.expect(petResponseData.name).is.equals(pm.collectionVariables.get('petName'));",
									"    pm.expect(petResponseData.photoUrls[0]).is.equals(pm.collectionVariables.get('photoUrls'));",
									"    pm.expect(petResponseData.status).is.equals(\"available\");",
									"});",
									"",
									"pm.test(\"Tags have not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.tags[0].id).is.equals(pm.collectionVariables.get('tagID'));",
									"    pm.expect(petResponseData.tags[0].name).is.equals(pm.collectionVariables.get('tagName'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{categoryID}},\n        \"name\": \"{{categoryName}}\"\n    },\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"{{photoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{tagID}},\n            \"name\": \"{{tagName}}\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Add a new pet to the store with status sold",
			"item": [
				{
					"name": "Create a new pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const petID = (Math.random() * 1000).round();",
									"const petName = \"petName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const photoUrls = \"https://petstore.swagger.io/#/pet/addPet\";",
									"",
									"const categoryID = (Math.random() * 1000).round();",
									"const categoryName = \"categoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const tagID = (Math.random() * 1000).round();",
									"const tagName = \"tagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.collectionVariables.set(\"petName\", petName);",
									"pm.collectionVariables.set(\"photoUrls\", photoUrls);",
									"",
									"pm.collectionVariables.set(\"categoryID\", categoryID);",
									"pm.collectionVariables.set(\"categoryName\", categoryName);",
									"",
									"pm.collectionVariables.set(\"tagID\", tagID);",
									"pm.collectionVariables.set(\"tagName\", tagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let petResponseData = pm.response.json();",
									"",
									"const petID = petResponseData.id;",
									"",
									"pm.environment.set(\"petID\", petID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - id, category, name, photoUrls, tags and status\", function () {",
									"    pm.expect(petResponseData).to.be.an('object');",
									"    pm.expect(petResponseData).to.have.property('id');",
									"    pm.expect(petResponseData).to.have.property('category');",
									"    pm.expect(petResponseData).to.have.property('name');",
									"    pm.expect(petResponseData).to.have.property('photoUrls');",
									"    pm.expect(petResponseData).to.have.property('tags');",
									"    pm.expect(petResponseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"ID is not null\", function () {",
									"    pm.expect(petResponseData.id).is.not.null;",
									"});",
									"",
									"pm.test(\"Category has not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.category.id).is.not.null;",
									"    pm.expect(petResponseData.category.name).is.equals(pm.collectionVariables.get('categoryName'));",
									"});",
									"",
									"pm.test(\"Name, photoUrls and status has proper value\", function () {",
									"    pm.expect(petResponseData.name).is.equals(pm.collectionVariables.get('petName'));",
									"    pm.expect(petResponseData.photoUrls[0]).is.equals(pm.collectionVariables.get('photoUrls'));",
									"    pm.expect(petResponseData.status).is.equals(\"sold\");",
									"});",
									"",
									"pm.test(\"Tags have not null ID and proper name\", function () {",
									"    pm.expect(petResponseData.tags[0].id).is.equals(pm.collectionVariables.get('tagID'));",
									"    pm.expect(petResponseData.tags[0].name).is.equals(pm.collectionVariables.get('tagName'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{categoryID}},\n        \"name\": \"{{categoryName}}\"\n    },\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"{{photoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{tagID}},\n            \"name\": \"{{tagName}}\"\n        }\n    ],\n    \"status\": \"sold\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Delete pet using pet ID",
			"item": [
				{
					"name": "Delete a chosen pet using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.to.have.status(200));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Get pet by ID",
			"item": [
				{
					"name": "Get pet using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let petResponseData = pm.response.json();",
									"",
									"pm.test(\"ID in response is the same like during creation\", function (){",
									"    pm.expect(petResponseData.id).is.equals(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"Category has not null ID and name\", function () {",
									"    pm.expect(petResponseData.category.id).is.not.null;",
									"    pm.expect(petResponseData.category.name).is.not.empty;",
									"});",
									"",
									"pm.test(\"Name and photoUrls are not empty\", function (){",
									"    pm.expect(petResponseData.name).is.not.empty;",
									"    pm.expect(petResponseData.photoUrls).is.not.empty;",
									"});",
									"",
									"pm.test(\"Status is available\", function (){",
									"    pm.expect(petResponseData.status).is.equals(\"available\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Get pet by its status",
			"item": [
				{
					"name": "Find pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let getPetResponseData = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Pet has proper status: pending\", () => {",
									"    let result = getPetResponseData.find(object => object.status === \"pending\")",
									"    pm.expect(result.status).to.equals(\"pending\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "pending",
									"description": "available, pending, sold"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Update an existing pet",
			"item": [
				{
					"name": "Update data about pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newPetName = \"updatedPetName_\" + pm.variables.replaceIn('{{$guid}}');",
									"const newPhotoUrls = \"https://petstore.swagger.io/#/pet/updatePet\";",
									"",
									"const newCategoryID = (Math.random() * 1000).round();",
									"const newCategoryName = \"updatedCategoryName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"const newTagID = (Math.random() * 1000).round();",
									"const newTagName = \"updatedTagName_\" + pm.variables.replaceIn('{{$guid}}');",
									"",
									"pm.collectionVariables.set(\"newPetName\", newPetName);",
									"pm.collectionVariables.set(\"newPhotoUrls\", newPhotoUrls);",
									"",
									"pm.collectionVariables.set(\"newCategoryID\", newCategoryID);",
									"pm.collectionVariables.set(\"newCategoryName\", newCategoryName);",
									"",
									"pm.collectionVariables.set(\"newTagID\", newTagID);",
									"pm.collectionVariables.set(\"newTagName\", newTagName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let updatedPetResponseBody = pm.response.json();",
									"",
									"pm.test(\"The pet ID is not updated\", function() {",
									"    pm.expect(updatedPetResponseBody.id).is.equals(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"Category has new ID and new name\", function() {",
									"    pm.expect(updatedPetResponseBody.category.id).is.equals(pm.collectionVariables.get('newCategoryID'));",
									"    pm.expect(updatedPetResponseBody.category.name).is.equals(pm.collectionVariables.get('newCategoryName'));",
									"});",
									"",
									"pm.test(\"Name and photoUrls are updated \", function() {",
									"    pm.expect(updatedPetResponseBody.name).is.equals(pm.collectionVariables.get('newPetName'));",
									"    pm.expect(updatedPetResponseBody.photoUrls[0]).is.equals(pm.collectionVariables.get('newPhotoUrls'));",
									"});",
									"",
									"pm.test(\"Tags data is updated\", function() {",
									"    pm.expect(updatedPetResponseBody.tags[0].id).is.equals(pm.collectionVariables.get('newTagID'));",
									"    pm.expect(updatedPetResponseBody.tags[0].name).is.equals(pm.collectionVariables.get('newTagName'));",
									"});",
									"",
									"pm.test(\"Status is changed to: sold\", function (){",
									"pm.expect(updatedPetResponseBody.status).is.equals(\"pending\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": {{newCategoryID}},\n        \"name\": \"{{newCategoryName}}\"\n    },\n    \"name\": \"{{newPetName}}\",\n    \"photoUrls\": [\n        \"{{newPhotoUrls}}\"\n    ],\n    \"tags\": [\n        {\n            \"id\": {{newTagID}},\n            \"name\": \"{{newTagName}}\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Pet][F] Upload an image fora chosen pet",
			"item": [
				{
					"name": "Upload an image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.type).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "metaData",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/Users/m.kmiecik/Desktop/dog.png"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petID}}/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petID}}",
								"uploadImage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Store][E2E] Create, get and delete created order",
			"item": [
				{
					"name": "Create new order for a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"const orderID = (Math.random() * 1000).round();",
									"const shipDate = new Date().toISOString();",
									"const orderStatus = \"placed\";",
									"",
									"pm.environment.set(\"orderID\", orderID);",
									"pm.collectionVariables.set(\"shipDate\", shipDate);",
									"pm.collectionVariables.set(\"orderStatus\", orderStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const orderResponseBody = pm.response.json();",
									"",
									"const orderID = orderResponseBody.id;",
									"",
									"pm.environment.set(\"orderID\", orderID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"ID of order is not null\", function () {",
									"    pm.expect(orderResponseBody.id).to.not.be.null;",
									"});",
									"",
									"pm.test(\"PetID in response has proper value\", function () {",
									"    pm.expect(orderResponseBody.petId).to.equal(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"The quantity, status and complete are correct\", function () {",
									"    pm.expect(orderResponseBody.quantity).to.equal(2);",
									"    pm.expect(orderResponseBody.status).to.equal(\"placed\");",
									"    pm.expect(orderResponseBody.complete).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 0,\n    \"petId\": {{petID}},\n    \"quantity\": 2,\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{orderStatus}}\",\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created order using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getOrderResponseBody = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"ID of order is not null\", function () {",
									"    pm.expect(getOrderResponseBody.id).is.equals(pm.environment.get('orderID'));",
									"});",
									"",
									"pm.test(\"PetID in response has proper value\", function () {",
									"    pm.expect(getOrderResponseBody.petId).to.equal(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"The quantity, status and complete are correct\", function () {",
									"    pm.expect(getOrderResponseBody.quantity).to.equal(2);",
									"    pm.expect(getOrderResponseBody.status).to.equal(\"placed\");",
									"    pm.expect(getOrderResponseBody.complete).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created order using order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created order using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Store][E2E] Try to get deleted order",
			"item": [
				{
					"name": "Create new order for a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"const orderID = (Math.random() * 1000).round();",
									"const shipDate = new Date().toISOString();",
									"const orderStatus = \"placed\";",
									"",
									"pm.environment.set(\"orderID\", orderID);",
									"pm.collectionVariables.set(\"shipDate\", shipDate);",
									"pm.collectionVariables.set(\"orderStatus\", orderStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const orderResponseBody = pm.response.json();",
									"",
									"const orderID = orderResponseBody.id;",
									"",
									"pm.environment.set(\"orderID\", orderID);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"ID of order is not null\", function () {",
									"    pm.expect(orderResponseBody.id).to.not.be.null;",
									"});",
									"",
									"pm.test(\"PetID in response has proper value\", function () {",
									"    pm.expect(orderResponseBody.petId).to.equal(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"The quantity, status and complete are correct\", function () {",
									"    pm.expect(orderResponseBody.quantity).to.equal(2);",
									"    pm.expect(orderResponseBody.status).to.equal(\"placed\");",
									"    pm.expect(orderResponseBody.complete).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 0,\n    \"petId\": {{petID}},\n    \"quantity\": 2,\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{orderStatus}}\",\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created order using order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created order using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Store][F] Delete purchase order by ID",
			"item": [
				{
					"name": "Delete created order using order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Store][F] Find purchase order by ID",
			"item": [
				{
					"name": "Get created order using its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getOrderResponseBody = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"ID of order is not null\", function () {",
									"    pm.expect(getOrderResponseBody.id).is.equals(pm.environment.get('orderID'));",
									"});",
									"",
									"pm.test(\"PetID in response has proper value\", function () {",
									"    pm.expect(getOrderResponseBody.petId).to.equal(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"The quantity, status and complete are correct\", function () {",
									"    pm.expect(getOrderResponseBody.quantity).to.equal(2);",
									"    pm.expect(getOrderResponseBody.status).to.equal(\"placed\");",
									"    pm.expect(getOrderResponseBody.complete).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Store][F] Get store inventory",
			"item": [
				{
					"name": "Returns pet inventories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(pm.response).is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api_key",
								"value": "{{apiKey}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Store][F] Place an order for a pet",
			"item": [
				{
					"name": "Create new order for a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"const orderID = (Math.random() * 1000).round();",
									"const shipDate = new Date().toISOString();",
									"const orderStatus = \"placed\";",
									"",
									"pm.environment.set(\"orderID\", orderID);",
									"pm.collectionVariables.set(\"shipDate\", shipDate);",
									"pm.collectionVariables.set(\"orderStatus\", orderStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const orderResponseBody = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"ID of order is not null\", function () {",
									"    pm.expect(orderResponseBody.id).to.not.be.null;",
									"});",
									"",
									"pm.test(\"PetID in response has proper value\", function () {",
									"    pm.expect(orderResponseBody.petId).to.equal(pm.environment.get('petID'));",
									"});",
									"",
									"pm.test(\"The quantity, status and complete are correct\", function () {",
									"    pm.expect(orderResponseBody.quantity).to.equal(2);",
									"    pm.expect(orderResponseBody.status).to.equal(\"placed\");",
									"    pm.expect(orderResponseBody.complete).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{orderID}},\n    \"petId\": {{petID}},\n    \"quantity\": 2,\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{orderStatus}}\",\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][E2E] Create user, get user data and login",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userID = (Math.random() * 10).toString().slice(2,3);",
									"const userName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const email = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const password = (Math.random() * 10).toString(36).slice(2,12);",
									"const phone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"userID\", userID);",
									"pm.environment.set(\"userName\", userName);",
									"pm.environment.set(\"password\", password);",
									"",
									"pm.collectionVariables.set(\"firstName\", firstName);",
									"pm.collectionVariables.set(\"lastName\", lastName);",
									"pm.collectionVariables.set(\"email\", email);",
									"pm.collectionVariables.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userID}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Get a data of created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.userStatus).is.equal(0);",
									"});",
									"",
									"pm.test(\"User status is equal to 0\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.userStatus).is.equal(0);",
									"});",
									"",
									"pm.test(\"User data is the same like during creation\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.username).is.equal(pm.environment.get('userName'));",
									"    pm.expect(responseData.firstName).is.equal(pm.collectionVariables.get('firstName'));",
									"    pm.expect(responseData.lastName).is.equal(pm.collectionVariables.get('lastName'));",
									"    pm.expect(responseData.email).is.equal(pm.collectionVariables.get('email'));",
									"    pm.expect(responseData.password).is.equal(pm.environment.get('password'));",
									"    pm.expect(responseData.phone).is.equal(pm.collectionVariables.get('phone'));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{userName}}&password={{password}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{userName}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][E2E] Create user, login and logout",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userID = (Math.random() * 10).toString().slice(2,3);",
									"const userName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const email = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const password = (Math.random() * 10).toString(36).slice(2,12);",
									"const phone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"userID\", userID);",
									"pm.environment.set(\"userName\", userName);",
									"pm.environment.set(\"password\", password);",
									"",
									"pm.collectionVariables.set(\"firstName\", firstName);",
									"pm.collectionVariables.set(\"lastName\", lastName);",
									"pm.collectionVariables.set(\"email\", email);",
									"pm.collectionVariables.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userID}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Login as a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{userName}}&password={{password}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{userName}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Validate the schema of the response JSON\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][E2E] Create, delete and try to get user data after deletion",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userID = (Math.random() * 10).toString().slice(2,3);",
									"const userName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const email = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const password = (Math.random() * 10).toString(36).slice(2,12);",
									"const phone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"userID\", userID);",
									"pm.environment.set(\"userName\", userName);",
									"pm.environment.set(\"password\", password);",
									"",
									"pm.collectionVariables.set(\"firstName\", firstName);",
									"pm.collectionVariables.set(\"lastName\", lastName);",
									"pm.collectionVariables.set(\"email\", email);",
									"pm.collectionVariables.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userID}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.type).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"pm.test(\"Message contais user name\", function() {",
									"    const responseUserId = pm.response.json().message;",
									"",
									"    pm.expect(responseUserId).is.equals(pm.environment.get('userName'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a data of deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Message contains proper error\", function () {",
									"    const responseMessage = pm.response.json().message;",
									"",
									"    pm.expect(responseMessage).is.equals(\"User not found\");",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Type is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][E2E] Create, update, delete user data",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userID = (Math.random() * 10).toString().slice(2,3);",
									"const userName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const email = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const password = (Math.random() * 10).toString(36).slice(2,12);",
									"const phone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"userID\", userID);",
									"pm.environment.set(\"userName\", userName);",
									"pm.environment.set(\"password\", password);",
									"",
									"pm.collectionVariables.set(\"firstName\", firstName);",
									"pm.collectionVariables.set(\"lastName\", lastName);",
									"pm.collectionVariables.set(\"email\", email);",
									"pm.collectionVariables.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userID}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Update an user account data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newUserUUID = (Math.random() * 10).toString().slice(2,3);",
									"const newUserName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const newLastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const newEmail = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const newPassword = (Math.random() * 10).toString(36).slice(2,12);",
									"const newPhone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"newUserUUID\", newUserUUID);",
									"pm.environment.set(\"newUserName\", newUserName);",
									"pm.environment.set(\"newPassword\", newPassword);",
									"",
									"pm.collectionVariables.set(\"newFirstName\", newFirstName);",
									"pm.collectionVariables.set(\"newLastName\", newLastName);",
									"pm.collectionVariables.set(\"newEmail\", newEmail);",
									"pm.collectionVariables.set(\"newPhone\", newPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{newUserUUID}},\n    \"username\": \"{{newUserName}}\",\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\",\n    \"phone\": \"{{newPhone}}\",\n    \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a data of updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User status is equal to 1\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.userStatus).is.equal(1);",
									"});",
									"",
									"pm.test(\"User data is the same like during creation\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect((responseData.id).toString()).is.equal(pm.environment.get('newUserUUID'));",
									"    pm.expect(responseData.username).is.equal(pm.environment.get('newUserName'));",
									"    pm.expect(responseData.firstName).is.equal(pm.collectionVariables.get('newFirstName'));",
									"    pm.expect(responseData.lastName).is.equal(pm.collectionVariables.get('newLastName'));",
									"    pm.expect(responseData.email).is.equal(pm.collectionVariables.get('newEmail'));",
									"    pm.expect(responseData.password).is.equal(pm.environment.get('newPassword'));",
									"    pm.expect(responseData.phone).is.equal(pm.collectionVariables.get('newPhone'));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{newUserName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{newUserName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.type).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"pm.test(\"Message contais user name\", function() {",
									"    const responseUserId = pm.response.json().message;",
									"",
									"    pm.expect(responseUserId).is.equals(pm.environment.get('newUserName'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{newUserName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{newUserName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a data of deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{newUserName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{newUserName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][E2E] Create, update, get user",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userID = (Math.random() * 10).toString().slice(2,3);",
									"const userName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const email = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const password = (Math.random() * 10).toString(36).slice(2,12);",
									"const phone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"userID\", userID);",
									"pm.environment.set(\"userName\", userName);",
									"pm.environment.set(\"password\", password);",
									"",
									"pm.collectionVariables.set(\"firstName\", firstName);",
									"pm.collectionVariables.set(\"lastName\", lastName);",
									"pm.collectionVariables.set(\"email\", email);",
									"pm.collectionVariables.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userID}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Update an user account data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newUserID = (Math.random() * 10).toString().slice(2,3);",
									"const newUserName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const newLastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const newEmail = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const newPassword = (Math.random() * 10).toString(36).slice(2,12);",
									"const newPhone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"newUserID\", newUserID);",
									"pm.environment.set(\"newUserName\", newUserName);",
									"pm.environment.set(\"newPassword\", newPassword);",
									"",
									"pm.collectionVariables.set(\"newFirstName\", newFirstName);",
									"pm.collectionVariables.set(\"newLastName\", newLastName);",
									"pm.collectionVariables.set(\"newEmail\", newEmail);",
									"pm.collectionVariables.set(\"newPhone\", newPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{newUserID}},\n    \"username\": \"{{newUserName}}\",\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\",\n    \"phone\": \"{{newPhone}}\",\n    \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a data of updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User status is equal to 1\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.userStatus).is.equal(1);",
									"});",
									"",
									"pm.test(\"User data is the same like during creation\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect((responseData.id).toString()).is.equal(pm.environment.get('newUserID'));",
									"    pm.expect(responseData.username).is.equal(pm.environment.get('newUserName'));",
									"    pm.expect(responseData.firstName).is.equal(pm.collectionVariables.get('newFirstName'));",
									"    pm.expect(responseData.lastName).is.equal(pm.collectionVariables.get('newLastName'));",
									"    pm.expect(responseData.email).is.equal(pm.collectionVariables.get('newEmail'));",
									"    pm.expect(responseData.password).is.equal(pm.environment.get('newPassword'));",
									"    pm.expect(responseData.phone).is.equal(pm.collectionVariables.get('newPhone'));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{newUserName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{newUserName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][F] Creation of a new user",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userID = (Math.random() * 10).toString().slice(2,3);",
									"const userName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const email = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const password = (Math.random() * 10).toString(36).slice(2,12);",
									"const phone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"userID\", userID);",
									"pm.environment.set(\"userName\", userName);",
									"pm.environment.set(\"password\", password);",
									"",
									"pm.collectionVariables.set(\"firstName\", firstName);",
									"pm.collectionVariables.set(\"lastName\", lastName);",
									"pm.collectionVariables.set(\"email\", email);",
									"pm.collectionVariables.set(\"phone\", phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userID}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][F] Delete chosen user",
			"item": [
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.type).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"pm.test(\"Type and message are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][F] Get user data",
			"item": [
				{
					"name": "Get a data of created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User name and password are the same like during creation\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.username).is.equal(pm.environment.get('userName'));",
									"    pm.expect(responseData.password).is.equal(pm.environment.get('password'));",
									"});",
									"",
									"pm.test(\"User ID is not null\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.id).is.not.null;",
									"});",
									"",
									"pm.test(\"User status is equal to 0\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.userStatus).is.equal(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][F] Login as user",
			"item": [
				{
					"name": "Login as a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{userName}}&password={{password}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{userName}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][F] Logout current logged in user",
			"item": [
				{
					"name": "Logout a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Validate the schema of the response JSON\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('code');",
									"  pm.expect(responseData).to.have.property('type');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[User][F] Update an user data",
			"item": [
				{
					"name": "Update an user account data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newUserID = (Math.random() * 10).toString().slice(2,3);",
									"const newUserName = \"testUser_\" + pm.variables.replaceIn('{{$guid}}');",
									"const newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"const newLastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"const newEmail = \"test_petStore_email_\" + (Math.random() * 10).toString().slice(2,11) + \"@test.com\";",
									"const newPassword = (Math.random() * 10).toString(36).slice(2,12);",
									"const newPhone = \"+48\" + (Math.random() * 10).toString().slice(2,11);",
									"",
									"pm.environment.set(\"newUserID\", newUserID);",
									"pm.environment.set(\"newUserName\", newUserName);",
									"pm.environment.set(\"newPassword\", newPassword);",
									"",
									"pm.collectionVariables.set(\"newFirstName\", newFirstName);",
									"pm.collectionVariables.set(\"newLastName\", newLastName);",
									"pm.collectionVariables.set(\"newEmail\", newEmail);",
									"pm.collectionVariables.set(\"newPhone\", newPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('type');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{newUserID}},\n    \"username\": \"{{newUserName}}\",\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\",\n    \"phone\": \"{{newPhoneNumber}}\",\n    \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Swagger Petstore Documentation",
			"item": [
				{
					"name": "pet",
					"item": [
						{
							"name": "{petId}",
							"item": [
								{
									"name": "uploadImage",
									"item": [
										{
											"name": "uploads an image",
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "scope",
															"value": "read:pets write:pets",
															"type": "string"
														},
														{
															"key": "authUrl",
															"value": "https://petstore.swagger.io/oauth/authorize",
															"type": "string"
														},
														{
															"key": "grant_type",
															"value": "implicit",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "additionalMetadata",
															"value": "<string>",
															"description": "Additional data to pass to server",
															"type": "text"
														},
														{
															"key": "file",
															"value": "<string>",
															"description": "file to upload",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/pet/:petId/uploadImage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId",
														"uploadImage"
													],
													"variable": [
														{
															"key": "petId",
															"value": "<long>",
															"description": "(Required) ID of pet to update"
														}
													]
												}
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "<token>",
																"description": "Added as a part of security scheme: oauth2"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "additionalMetadata",
																	"value": "<string>",
																	"description": "Additional data to pass to server",
																	"type": "text"
																},
																{
																	"key": "file",
																	"value": "<string>",
																	"description": "file to upload",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/pet/:petId/uploadImage",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"pet",
																":petId",
																"uploadImage"
															],
															"variable": [
																{
																	"key": "petId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"code\": \"<integer>\",\n  \"type\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Find pet by ID",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "api_key",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "<long>",
													"description": "(Required) ID of pet to return"
												}
											]
										},
										"description": "Returns a single pet"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api_key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/:petId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId"
													],
													"variable": [
														{
															"key": "petId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}"
										},
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "api_key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/:petId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId"
													],
													"variable": [
														{
															"key": "petId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Pet not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "api_key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/:petId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId"
													],
													"variable": [
														{
															"key": "petId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Updates a pet in the store with form data",
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "scope",
													"value": "read:pets write:pets",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "https://petstore.swagger.io/oauth/authorize",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "implicit",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "Updated name of the pet"
												},
												{
													"key": "status",
													"value": "<string>",
													"description": "Updated status of the pet"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "<long>",
													"description": "(Required) ID of pet that needs to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "<string>",
															"description": "Updated name of the pet"
														},
														{
															"key": "status",
															"value": "<string>",
															"description": "Updated status of the pet"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/pet/:petId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId"
													],
													"variable": [
														{
															"key": "petId"
														}
													]
												}
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Deletes a pet",
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "scope",
													"value": "read:pets write:pets",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "https://petstore.swagger.io/oauth/authorize",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "implicit",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "api_key",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "<long>",
													"description": "(Required) Pet id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "api_key",
														"value": "<string>"
													},
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/:petId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId"
													],
													"variable": [
														{
															"key": "petId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Pet not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "api_key",
														"value": "<string>"
													},
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/:petId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														":petId"
													],
													"variable": [
														{
															"key": "petId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "findByStatus",
							"item": [
								{
									"name": "Finds Pets by status",
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "scope",
													"value": "read:pets write:pets",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "https://petstore.swagger.io/oauth/authorize",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "implicit",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available",
													"description": "(Required) Status values that need to be considered for filter"
												},
												{
													"key": "status",
													"value": "available",
													"description": "(Required) Status values that need to be considered for filter"
												}
											]
										},
										"description": "Multiple status values can be provided with comma separated strings"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/findByStatus?status=available",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "available",
															"description": "(Required) Status values that need to be considered for filter"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"pending\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]"
										},
										{
											"name": "Invalid status value",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/findByStatus?status=available",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "available",
															"description": "(Required) Status values that need to be considered for filter"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "findByTags",
							"item": [
								{
									"name": "Finds Pets by tags",
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "scope",
													"value": "read:pets write:pets",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "https://petstore.swagger.io/oauth/authorize",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "implicit",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByTags?tags=<string>&tags=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByTags"
											],
											"query": [
												{
													"key": "tags",
													"value": "<string>",
													"description": "(Required) Tags to filter by"
												},
												{
													"key": "tags",
													"value": "<string>",
													"description": "(Required) Tags to filter by"
												}
											]
										},
										"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/findByTags?tags=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByTags"
													],
													"query": [
														{
															"key": "tags",
															"value": "<string>",
															"description": "(Required) Tags to filter by"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"pending\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]"
										},
										{
											"name": "Invalid tag value",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<token>",
														"description": "Added as a part of security scheme: oauth2"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pet/findByTags?tags=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByTags"
													],
													"query": [
														{
															"key": "tags",
															"value": "<string>",
															"description": "(Required) Tags to filter by"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Add a new pet to the store",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "read:pets write:pets",
											"type": "string"
										},
										{
											"key": "authUrl",
											"value": "https://petstore.swagger.io/oauth/authorize",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update an existing pet",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "read:pets write:pets",
											"type": "string"
										},
										{
											"key": "authUrl",
											"value": "https://petstore.swagger.io/oauth/authorize",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation exception",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "store",
					"item": [
						{
							"name": "inventory",
							"item": [
								{
									"name": "Returns pet inventories by status",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "api_key",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/store/inventory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"inventory"
											]
										},
										"description": "Returns a map of status codes to quantities"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api_key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/store/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"inventory"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"eab\": \"<integer>\",\n  \"sunt2f5\": \"<integer>\",\n  \"sed97e\": \"<integer>\",\n  \"tempor_09f\": \"<integer>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "order",
							"item": [
								{
									"name": "{orderId}",
									"item": [
										{
											"name": "Find purchase order by ID",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "<long>",
															"description": "(Required) ID of pet that needs to be fetched"
														}
													]
												},
												"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
												},
												{
													"name": "Invalid ID supplied",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Order not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete purchase order by ID",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "<long>",
															"description": "(Required) ID of the order that needs to be deleted"
														}
													]
												},
												"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
											},
											"response": [
												{
													"name": "Invalid ID supplied",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Order not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Place an order for a pet",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/store/order",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
										},
										{
											"name": "Invalid Order",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/store/order",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "createWithList",
							"item": [
								{
									"name": "Creates list of users with given input array",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/createWithList",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithList"
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/createWithList",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"createWithList"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{username}",
							"item": [
								{
									"name": "Get user by user name",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
										},
										{
											"name": "Invalid username supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Updated user",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) name that need to be updated"
												}
											]
										},
										"description": "This can only be done by the logged in user."
									},
									"response": [
										{
											"name": "Invalid user supplied",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete user",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The name that needs to be deleted"
												}
											]
										},
										"description": "This can only be done by the logged in user."
									},
									"response": [
										{
											"name": "Invalid username supplied",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "Logs user into the system",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The user name for login"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) The password for login in clear text"
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"login"
													],
													"query": [
														{
															"key": "username",
															"value": "<string>",
															"description": "(Required) The user name for login"
														},
														{
															"key": "password",
															"value": "<string>",
															"description": "(Required) The password for login in clear text"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "X-Expires-After",
													"value": "<dateTime>",
													"description": {
														"content": "date in UTC when token expires",
														"type": "text/plain"
													}
												},
												{
													"key": "X-Rate-Limit",
													"value": "<integer>",
													"description": {
														"content": "calls per hour allowed by the user",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "<string>"
										},
										{
											"name": "Invalid username/password supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"login"
													],
													"query": [
														{
															"key": "username",
															"value": "<string>",
															"description": "(Required) The user name for login"
														},
														{
															"key": "password",
															"value": "<string>",
															"description": "(Required) The password for login in clear text"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "logout",
							"item": [
								{
									"name": "Logs out current logged in user session",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"logout"
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"logout"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "createWithArray",
							"item": [
								{
									"name": "Creates list of users with given input array",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/createWithArray",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithArray"
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/createWithArray",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"createWithArray"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Create user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	]
}